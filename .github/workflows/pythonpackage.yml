name: tests

on: [push]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4.1.1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m ensurepip --upgrade
        pip install -e .

  wheels:
    if: github.event_name == 'push'
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
    steps:
    - uses: actions/checkout@v4.1.1
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.5
      env:
        # CIBW_ARCHS_MACOS: x86_64 arm64 universal2
        # CIBW_ARCHS_LINUX: auto aarch64
        # CIBW_ARCHS_WINDOWS: AMD64
        CIBW_BUILD: cp312-win_amd64

    - name: Build sdist
      run: |
        pip install cython wheel setuptools
        python setup.py sdist

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.1
      with:
        name: distribution-${{ github.run_number }}
        path: "dist/*"
        if-no-files-found: error
        retention-days: 1

  create_release:
    needs: wheels
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: run-${{ github.run_number }}
        release_name: Release for run ${{ github.run_number }}
        draft: false
        prerelease: false
        body: |
          Automated release for run ${{ github.run_number }}.

